import { Component, OnInit } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { ActivatedRoute, Params, Router } from '@angular/router';
import { DeviceTemplate } from 'src/app/models/Device Template/device-template';
import { DeviceTemplateService } from 'src/app/services/device-template.service';
import { Validators } from '@angular/forms';
import { Telemetry } from 'src/app/models/Device Template/telemetry';
import { NewTelemetry } from 'src/app/models/Device Template/new-telemetry';

enum schemaType{
  Autogenerated = 'Autogenerated',
  Enum = 'Enum',
  Integer = 'Integer',
  String = 'String',
  Double = 'Double',
  Boolean = 'Boolean',
  Text = 'Text',
  Long = 'Long',
  Time = 'Time',
  Date = 'Date',
  Object = 'Object',
  OID = 'OID'
}

@Component({
  selector: 'app-edit-device-telemetry',
  templateUrl: './edit-device-telemetry.component.html',
  styleUrls: ['./edit-device-telemetry.component.scss']
})
export class EditDeviceTelemetryComponent implements OnInit {
  eSchemaType = schemaType;

  device!:DeviceTemplate;
  telemetry!:Telemetry;
  newTelemetry!:NewTelemetry;
  id!:number;

  telemtryProfileForm = this.fb.group({
    Name:['',Validators.required],
    Frecuency:['',Validators.required],
    Type:[''],
    Unit:[''],
    Schema:['']
  })

  get Name() { return this.telemtryProfileForm.get('Name'); }
  get Frecuency() { return this.telemtryProfileForm.get('Frecuency'); }
  get Type() { return this.telemtryProfileForm.get('Type'); }
  get Unit() { return this.telemtryProfileForm.get('Unit'); }
  get Schema() { return this.telemtryProfileForm.get('Schema'); }
  
  constructor(private fb:FormBuilder, private deviceService:DeviceTemplateService, 
    private router:Router, private activatedRoute: ActivatedRoute) { }

  async ngOnInit(): Promise<void> {
    this.device = JSON.parse('' + localStorage.getItem('deviceDetail'));
    this.activatedRoute.params.subscribe((params: Params) => this.id = params['telemetryId']);
    
    let finTelemetry = this.device.Telemetries?.find(telemetry => telemetry.Id == this.id)
    if(finTelemetry){
      this.telemetry = finTelemetry!;      
    }
    else{
      this.createNewTelemetry();
    }

    this.telemtryProfileForm.setValue({
      Name: this.telemetry.Name,
      Frecuency: this.telemetry.Frecuency ,
      Type: this.telemetry.Type, 
      Unit: this.telemetry.Unit,
      Schema: this.telemetry.Schema,
      Severity: this.telemetry.Event_?.Severity});

    this.telemtryProfileForm.get('Schema')?.setValue(this.telemetry.Schema);
  }

  saveDeviceTelemetry(){
    this.telemetry = {
      Id: 0,
      Schema: this.telemtryProfileForm.get('Schema')?.value,
      Name: this.telemtryProfileForm.get('Name')?.value,
      Frecuency: this.telemtryProfileForm.get('Frecuency')?.value,
      Unit: this.telemtryProfileForm.get('Unit')?.value,
      Type: this.telemtryProfileForm.get('Type')?.value,
    }

    console.log(this.telemetry);
    this.deviceService.updateDeviceTelemetry(this.telemetry.Id,this.telemetry).subscribe({
      next : result =>{
        console.log(result);
      },
      error : error => {
        alert("Failed to save changes: " + error);
      },
      complete : () => {
        localStorage.setItem('deviceDetail',JSON.stringify(this.device));
        this.router.navigateByUrl("DeviceTemplate/" + this.device.Name + "/Telemetry/" + this.telemetry.Id);
      }
    });
  }

  createNewTelemetry(){
    this.newTelemetry = {
      DeviceTemplate_oid: this.device.Id,
      Type:1,
      Frecuency:1,
      Unit:1,
      Name:"",
    }

    this.deviceService.createTelemetry(this.newTelemetry).subscribe({
      next: result => {
        this.telemetry = result;
      },
      error: error => {
        alert("Failed to create telemetry: " + error);
      },
      complete: () => {
        alert("Creating new telemetry, fill in the fields")
      }
    })
  }

  cancelDeviceTelemetry(){
    this.router.navigateByUrl("DeviceTemplate/ " + this.device.Id);
  }
}
